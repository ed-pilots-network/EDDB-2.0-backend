plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.0' apply false
    id 'org.javamodularity.moduleplugin' version '1.8.12' apply false
    id "org.gradlex.extra-java-module-info" version "1.4"
}

repositories {
    mavenCentral() {
        metadataSources {
            gradleMetadata()
        }
    }
    maven {
        url 'https://nexus.edpn.io/repository/maven-releases/'
    }
    if (version.endsWith('-SNAPSHOT')) { //disallow snapshot dependencies in releases
        maven {
            url 'https://nexus.edpn.io/repository/maven-snapshots/'
        }
    }
}

allprojects {
    group = 'io.edpn.backend'
    version = '0.0.1-SNAPSHOT'
    compileJava.options.encoding = 'UTF-8'
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.javamodularity.moduleplugin"
    apply plugin: "org.gradlex.extra-java-module-info"

    repositories {
        mavenCentral()
        maven {
            url 'https://nexus.edpn.io/repository/maven-releases/'
        }
        if (version.endsWith('-SNAPSHOT')) { //disallow snapshot dependencies in releases
            maven {
                url 'https://nexus.edpn.io/repository/maven-snapshots/'
            }
        }
    }

    task prepareKotlinBuildScriptModel {}
    task wrapper {}

    test {
        systemProperty "file.encoding", "utf-8"
        useJUnitPlatform()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }

    ext {
        springBootVersion = '3.1.0'
        jacksonVersion = '2.14.2'
        lombokVersion = '1.18.28'
        mybatisSpringBootVersion = '3.0.2'
        liquibaseVersion = '4.22.0'
        postgresqlVersion = '42.6.0'
        springdocOpenapiVersion = '2.1.0'
        prometheusVersion = '1.11.1'
        backendUtilVersion = '0.0.1-SNAPSHOT'
        backendMybatisUtilVersion = '0.0.1-SNAPSHOT'
        backendMessageProcessorLibVersion = '0.0.1-SNAPSHOT'
        bucket4jCoreVersion = '7.6.0'
        jjwtVersion='0.9.1'
        jakartaVersion='6.0.0'
    }

    dependencies {
        constraints {
            implementation "io.edpn.backend:backend-util:${backendUtilVersion}"
            implementation "io.edpn.backend:backend-mybatis-util:${backendUtilVersion}"
            implementation "io.edpn.backend:backend-messageprocessor-lib:${backendUtilVersion}"
            implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-integration:${springBootVersion}"
            implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
            implementation "org.springframework.integration:spring-integration-http:6.1.0"
            implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"
            implementation "org.springframework.kafka:spring-kafka:3.0.4"
            implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}"
            implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
            implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
            implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:${bucket4jCoreVersion}"
            implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"
            runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
            runtimeOnly "io.micrometer:micrometer-registry-prometheus:${prometheusVersion}"
            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            compileOnly "jakarta.servlet:jakarta.servlet-api:${jakartaVersion}"
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
            testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
            testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        }
    }
}
