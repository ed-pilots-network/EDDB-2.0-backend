<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="create_commodity_market_info_view" author="pveeckhout" runOnChange="true">
        <createView viewName="commodity_market_info_view" replaceIfExists="true">
            <![CDATA[
            WITH
                latest_market_data as (
                    SELECT
                        station_id,
                        commodity_id,
                        mean_price,
                        buy_price,
                        stock,
                        stock_bracket,
                        sell_price,
                        demand,
                        demand_bracket,
                        status_flags,
                        prohibited
                    FROM market_datum
                    WHERE (station_id, timestamp) IN (
                        SELECT DISTINCT ON (station_id)
                            station_id,
                            timestamp
                        FROM market_datum
                        ORDER BY station_id,
                            timestamp DESC
                    )
                ),
                mean_prices AS (
                    SELECT
                        commodity_id,
                        MAX(sell_price) AS max_sell_price,
                        MIN(nullif(buy_price,0)) AS min_buy_price
                    FROM latest_market_data
                    GROUP BY commodity_id),
                average_mean_prices AS (
                     SELECT
                         commodity_id,
                         AVG(mean_price) as avg_mean_price
                     FROM latest_market_data
                     GROUP BY commodity_id),
                stations_with_prices AS (
                     SELECT
                        mp.commodity_id,
                        md.station_id,
                        s.system_id,
                        md.buy_price,
                        md.sell_price,
                        sys.x_coordinate,
                        sys.y_coordinate,
                        sys.z_coordinate,
                        ROW_NUMBER() OVER (
                            PARTITION BY mp.commodity_id, md.sell_price
                            ORDER BY
                                POWER(sys.x_coordinate, 2) + POWER(sys.y_coordinate, 2) + POWER(sys.z_coordinate, 2)
                        ) as rn_sell,
                        ROW_NUMBER() OVER (
                            PARTITION BY mp.commodity_id, md.buy_price
                            ORDER BY
                                POWER(sys.x_coordinate, 2) + POWER(sys.y_coordinate, 2) + POWER(sys.z_coordinate, 2)
                        ) as rn_buy
                     FROM latest_market_data md
                             JOIN mean_prices mp ON mp.commodity_id = md.commodity_id
                             JOIN station s ON md.station_id = s.id
                             JOIN system sys ON s.system_id = sys.id
                    WHERE md.sell_price = mp.max_sell_price OR md.buy_price = mp.min_buy_price),
                highest_selling AS (
                    SELECT
                        commodity_id,
                        station_id AS highest_selling_station
                    FROM stations_with_prices
                    WHERE rn_sell = 1),
                lowest_buying AS (
                    SELECT
                        commodity_id,
                        station_id AS lowest_buying_station
                    FROM stations_with_prices
                    WHERE rn_buy = 1),
                min_max_stations as (
                    SELECT
                        COALESCE(hs.commodity_id, lb.commodity_id) AS commodity_id,
                        hs.highest_selling_station,
                        lb.lowest_buying_station
                    FROM highest_selling hs
                        FULL JOIN lowest_buying lb ON hs.commodity_id = lb.commodity_id),
                buy_sell_counts AS (
                    SELECT
                        md.commodity_id,
                        COUNT(DISTINCT CASE WHEN md.buy_price IS NOT NULL AND md.buy_price != 0 THEN md.station_id END) AS stations_with_buy_price,
                        COUNT(DISTINCT CASE WHEN md.sell_price IS NOT NULL AND md.sell_price != 0 THEN md.station_id END) AS stations_with_sell_price,
                        COUNT(DISTINCT CASE WHEN md.buy_price < amp.avg_mean_price THEN md.station_id END) AS stations_with_buy_price_lower_than_average,
                        COUNT(DISTINCT CASE WHEN md.sell_price > amp.avg_mean_price THEN md.station_id END) AS stations_with_sell_price_higher_than_average
                    FROM latest_market_data md
                             JOIN average_mean_prices amp ON amp.commodity_id = md.commodity_id
                    GROUP BY md.commodity_id)
            SELECT
                md.commodity_id,
                MAX(NULLIF(md.buy_price,0)) AS max_buy_price,
                MIN(NULLIF(md.buy_price,0)) AS minb_buy_price,
                AVG(NULLIF(md.buy_price,0)) AS avg_buy_price,
                MAX(NULLIF(md.sell_price,0)) AS max_sell_price,
                MIN(NULLIF(md.sell_price,0)) AS min_sell_price,
                AVG(NULLIF(md.sell_price,0)) AS avg_sell_price,
                MIN(NULLIF(md.mean_price,0)) AS min_mean_price,
                MAX(NULLIF(md.mean_price,0)) AS max_mean_price,
                AVG(NULLIF(md.mean_price,0)) AS average_mean_price,
                SUM(md.stock) AS total_stock,
                SUM(md.demand) AS total_demand,
                COUNT(DISTINCT md.station_id) AS total_stations,
                bsc.stations_with_buy_price,
                bsc.stations_with_sell_price,
                bsc.stations_with_buy_price_lower_than_average,
                bsc.stations_with_sell_price_higher_than_average,
                MIN((CASE WHEN mms.highest_selling_station IS NOT NULL THEN mms.highest_selling_station END)::text)::UUID AS
                    highest_selling_to_station,
                MAX((CASE WHEN mms.lowest_buying_station IS NOT NULL THEN mms.lowest_buying_station END)::text)::UUID AS
                    lowest_buying_from_station
            FROM latest_market_data md
                     LEFT JOIN buy_sell_counts bsc ON md.commodity_id = bsc.commodity_id
                     LEFT JOIN min_max_stations mms ON md.commodity_id = mms.commodity_id
            GROUP BY
                md.commodity_id,
                bsc.stations_with_buy_price,
                bsc.stations_with_sell_price,
                bsc.stations_with_buy_price_lower_than_average,
                bsc.stations_with_sell_price_higher_than_average;
            ]]>
        </createView>
    </changeSet>

</databaseChangeLog>
